package Nodes;
import java.io.*; 
import java.util.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class FunctionDefinition {
                /*
                     Add member variables for this class as per your needs 
                */

                /*
	                 processsing functionDefinition Node
	                 jsonObject --> contains information of this Node 
	                 valueMap --> maps the childs of this node if it exists with the code  generated by them
                */

				  
					public static String functionDefinition(JSONObject jsonObject,HashMap<JSONObject, String> valueMap)
					{
						StringBuilder sb = new StringBuilder();
						sb.append("\n");
						JSONObject j = (JSONObject)jsonObject.get("attributes");
						sb.append(j.get("kind").toString());
						if(!j.get("name").toString().equals(""))sb.append(" ");
						sb.append(j.get("name").toString());
						JSONArray jsonArray =  (JSONArray)jsonObject.get("children");
						sb.append(valueMap.get(jsonArray.get(0))+" ");
						sb.append(j.get("visibility").toString()+" ");
						try{
							sb.append(j.get("stateMutability").toString()+" ");
						}
						catch(Exception e)
						{

						}
						if(!valueMap.get(jsonArray.get(1)).equals("()")){sb.append("returns"+valueMap.get(jsonArray.get(1)));}

						sb.append(valueMap.get(jsonArray.get(2)));

						return sb.toString();
					}
				
}